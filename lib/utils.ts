import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// generated by shadcn
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

// created by chatgpt
export function isBase64Image(imageData: string) {
  const base64Regex = /^data:image\/(png|jpe?g|gif|webp);base64,/;
  return base64Regex.test(imageData);
}

// created by chatgpt
export function formatDateString(dateString: string) {
  const now = new Date();
  const date = new Date(dateString);
  const diffInMs = now.getTime() - date.getTime();
  const diffInMinutes = diffInMs / (1000 * 60);
  const diffInHours = diffInMinutes / 60;

  if (diffInHours <= 1) {
    return `${Math.floor(diffInMinutes)}m`;
  } else if (diffInHours <= 24) {
    return `${Math.floor(diffInHours)}h`;
  } else if (diffInHours <= 72) {
    return `${Math.floor(diffInHours / 24)}d`;
  } else {
    const formattedDate = date.toLocaleDateString("en-US", {
      year: now.getFullYear() !== date.getFullYear() ? 'numeric' : undefined, // Only show year if it's not the current year
      month: 'long',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
    });

    return `${formattedDate}`;
  }
}

// created by chatgpt
export function formatThreadCount(count: number): string {
  if (count === 0) {
    return "No Threads";
  } else {
    const threadCount = count.toString().padStart(2, "0");
    const threadWord = count === 1 ? "Thread" : "Threads";
    return `${threadCount} ${threadWord}`;
  }
}
